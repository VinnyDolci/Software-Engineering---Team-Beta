1. What are the advantages of Extended BNF (EBNF) over BNF for grammar? 
For a Given BNF: 
<L-expr>  ::  = true | false | <identifier>  | not <L-expr>  | <comarison>  | <L-expr> <L-op> <L-expr>  
Give equivalent EBNF.

1. The advantages of EBNF over BNF is that multiple definitions are grouped within parenthesis separated with a vertical bar to remove ambiguity. As well as using curly brackets to represent repetition with either a * or + following the close bracket.
Lastly, optional occurrences are represented in square brackets,

<L-expr> ::= [not] (true | false | <identifier> | <comparison) {('&&' | '||') [not] (true | false | <identifier> | comparison>)}*

2. Give unambiguous grammar for nested if-then-else structure. 
Using the same unambiguous grammar show how we can parse the following structure of if then else statement: 
if E1 then if E2 then S1 else S2 else S3.

2. The unambiguois grammer for nested if-then-else structure is as follows:

	<if-then-else-statement> ::= <matched-if-then-else | <unmatched-if-then-else>
	<matched-if-then-else> ::= if <cond> then <matched-if-then-else> else <matched-if-then-else> | <other-statements>
	<unmatched-if-then-else> ::= if <cond> then <if-then-else-statement> | if <cond> then <matched-if-then-else> else <unmatched-if-then-else>